server.port=8888
# 数据源 db0,db1,db2
sharding.jdbc.datasource.names=db0,db1,db2

# 第一个数据库
sharding.jdbc.datasource.db0.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.db0.driver-class-name=oracle.jdbc.driver.OracleDriver
sharding.jdbc.datasource.db0.jdbc-url=jdbc:oracle:thin:@192.168.200.180:1524:orcl2
sharding.jdbc.datasource.db0.username=pasi
sharding.jdbc.datasource.db0.password=pasi
sharding.jdbc.datasource.db0.connectionTimeoutMilliseconds=30000
sharding.jdbc.datasource.db0.idleTimeoutMilliseconds=60000
sharding.jdbc.datasource.db0.maxLifetimeMilliseconds=1800000
sharding.jdbc.datasource.db0.maxPoolSize=65
sharding.jdbc.datasource.db0.ConnectionTestQuery=select 'x' from dual 
sharding.jdbc.datasource.db0.connectionTestQuery=select 'x' from dual 

# 第二个数据库
sharding.jdbc.datasource.db1.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.db1.driver-class-name=oracle.jdbc.driver.OracleDriver
sharding.jdbc.datasource.db1.jdbc-url=jdbc:oracle:thin:@192.168.200.180:1524:orcl2
sharding.jdbc.datasource.db1.username=pasi
sharding.jdbc.datasource.db1.password=pasi
sharding.jdbc.datasource.db1.connectionTimeoutMilliseconds=30000
sharding.jdbc.datasource.db1.idleTimeoutMilliseconds=60000
sharding.jdbc.datasource.db1.maxLifetimeMilliseconds=1800000
sharding.jdbc.datasource.db1.maxPoolSize=65

# 第三个数据库
sharding.jdbc.datasource.db2.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.db2.driver-class-name=oracle.jdbc.driver.OracleDriver
sharding.jdbc.datasource.db2.jdbc-url=jdbc:oracle:thin:@192.168.200.180:1524:orcl2
sharding.jdbc.datasource.db2.username=pasi
sharding.jdbc.datasource.db2.password=pasi
sharding.jdbc.datasource.db2.connectionTimeoutMilliseconds=30000
sharding.jdbc.datasource.db2.idleTimeoutMilliseconds=60000
sharding.jdbc.datasource.db2.maxLifetimeMilliseconds=1800000
sharding.jdbc.datasource.db2.maxPoolSize=65

# 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
# 分库策略
#sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id
#sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=db0
# 不分库操作。
sharding.jdbc.config.sharding.default-database-strategy.none.sharding-column=

# 分表策略 其中book为逻辑表 分表主要取决于id行
#sharding.jdbc.config.sharding.tables.book.actual-data-nodes=db$->{0..2}.book_$->{0..2}
#sharding.jdbc.config.sharding.tables.book.actual-data-nodes=db0.book_$->{0..2}
sharding.jdbc.config.sharding.tables.book.actual-data-nodes=db0.book_$->{0..2}
sharding.jdbc.config.sharding.tables.book.table-strategy.inline.sharding-column=cnt
# 分片算法表达式
sharding.jdbc.config.sharding.tables.book.table-strategy.inline.algorithm-expression=book_$->{cnt % 3}

# 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
#sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id

# 打印执行的数据库以及语句
sharding.jdbc.config.props..sql.show=true
spring.main.allow-bean-definition-overriding=true